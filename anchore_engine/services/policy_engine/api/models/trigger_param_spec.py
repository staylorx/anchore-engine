# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class TriggerParamSpec(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, description=None, required=None, is_deprecated=None, superceded_by=None, validator=None):
        """
        TriggerParamSpec - a model defined in Swagger

        :param name: The name of this TriggerParamSpec.
        :type name: str
        :param description: The description of this TriggerParamSpec.
        :type description: str
        :param required: The required of this TriggerParamSpec.
        :type required: bool
        :param is_deprecated: The is_deprecated of this TriggerParamSpec.
        :type is_deprecated: str
        :param superceded_by: The superceded_by of this TriggerParamSpec.
        :type superceded_by: str
        :param validator: The validator of this TriggerParamSpec.
        :type validator: object
        """
        self.swagger_types = {
            'name': str,
            'description': str,
            'required': bool,
            'is_deprecated': bool,
            'superceded_by': str,
            'validator': object
        }

        self.attribute_map = {
            'name': 'name',
            'description': 'description',
            'required': 'required',
            'is_deprecated': 'is_deprecated',
            'superceded_by': 'superceded_by',
            'validator': 'validator'
        }

        self._name = name
        self._description = description
        self._required = required
        self._is_deprecated = is_deprecated
        self._superceded_by = superceded_by
        self._validator = validator

    @classmethod
    def from_dict(cls, dikt):
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TriggerParamSpec of this TriggerParamSpec.
        :rtype: TriggerParamSpec
        """
        return deserialize_model(dikt, cls)

    @property
    def name(self):
        """
        Gets the name of this TriggerParamSpec.
        Parameter name as it appears in policy document

        :return: The name of this TriggerParamSpec.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this TriggerParamSpec.
        Parameter name as it appears in policy document

        :param name: The name of this TriggerParamSpec.
        :type name: str
        """

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this TriggerParamSpec.

        :return: The description of this TriggerParamSpec.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this TriggerParamSpec.

        :param description: The description of this TriggerParamSpec.
        :type description: str
        """

        self._description = description

    @property
    def required(self):
        """
        Gets the required of this TriggerParamSpec.
        Is this a required parameter or optional

        :return: The required of this TriggerParamSpec.
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """
        Sets the required of this TriggerParamSpec.
        Is this a required parameter or optional

        :param required: The required of this TriggerParamSpec.
        :type required: bool
        """

        self._required = required

    @property
    def is_deprecated(self):
        """
        Gets the is_deprecated of this TriggerParamSpec.
        True if this gate is deprecated

        :return: The is_deprecated of this TriggerParamSpec.
        :rtype: bool
        """
        return self._is_deprecated

    @is_deprecated.setter
    def is_deprecated(self, is_deprecated):
        """
        Sets the is_deprecated of this TriggerParamSpec.
        True if this gate is deprecated

        :param is_deprecated: The is_deprecated of this TriggerParamSpec.
        :type is_deprecated: bool
        """

        self._is_deprecated = is_deprecated

    @property
    def superceded_by(self):
        """
        Gets the superceded_by of this TriggerParamSpec.
        The name of another gate that supercedes this on functionally if this is deprecated

        :return: The superceded_by of this TriggerParamSpec.
        :rtype: str
        """
        return self._superceded_by

    @superceded_by.setter
    def superceded_by(self, superceded_by):
        """
        Sets the superceded_by of this TriggerParamSpec.
        The name of another gate that supercedes this on functionally if this is deprecated

        :param superceded_by: The superceded_by of this TriggerParamSpec.
        :type superceded_by: str
        """

        self._superceded_by = superceded_by

    @property
    def validator(self):
        """
        Gets the validator of this TriggerParamSpec.
        If present, a definition for validation of input. Typically a jsonschema object that can be used to validate an input against.

        :return: The validator of this TriggerParamSpec.
        :rtype: object
        """
        return self._validator

    @validator.setter
    def validator(self, validator):
        """
        Sets the validator of this TriggerParamSpec.
        If present, a definition for validation of input. Typically a jsonschema object that can be used to validate an input against.

        :param validator: The validator of this TriggerParamSpec.
        :type validator: object
        """

        self._validator = validator

