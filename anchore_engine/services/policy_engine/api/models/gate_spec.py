# coding: utf-8

from __future__ import absolute_import
from anchore_engine.services.policy_engine.api.models.trigger_spec import TriggerSpec
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class GateSpec(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, description=None, is_deprecated=None, superceded_by=None, triggers=None):
        """
        GateSpec - a model defined in Swagger

        :param name: The name of this GateSpec.
        :type name: str
        :param description: The description of this GateSpec.
        :type description: str
        :param is_deprecated: The is_deprecated of this GateSpec.
        :type is_deprecated: str
        :param superceded_by: The superceded_by of this GateSpec.
        :type superceded_by: str
        :param triggers: The triggers of this GateSpec.
        :type triggers: List[TriggerSpec]
        """
        self.swagger_types = {
            'name': str,
            'description': str,
            'is_deprecated': bool,
            'superceded_by': str,
            'triggers': List[TriggerSpec]
        }

        self.attribute_map = {
            'name': 'name',
            'description': 'description',
            'is_deprecated': 'is_deprecated',
            'superceded_by': 'superceded_by',
            'triggers': 'triggers'
        }

        self._name = name
        self._description = description
        self._is_deprecated = is_deprecated
        self._superceded_by = superceded_by
        self._triggers = triggers

    @classmethod
    def from_dict(cls, dikt):
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GateSpec of this GateSpec.
        :rtype: GateSpec
        """
        return deserialize_model(dikt, cls)

    @property
    def name(self):
        """
        Gets the name of this GateSpec.
        Gate name, as it would appear in a policy document

        :return: The name of this GateSpec.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this GateSpec.
        Gate name, as it would appear in a policy document

        :param name: The name of this GateSpec.
        :type name: str
        """

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this GateSpec.
        Description of the gate

        :return: The description of this GateSpec.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this GateSpec.
        Description of the gate

        :param description: The description of this GateSpec.
        :type description: str
        """

        self._description = description

    @property
    def is_deprecated(self):
        """
        Gets the is_deprecated of this GateSpec.
        True if this gate is deprecated

        :return: The is_deprecated of this GateSpec.
        :rtype: bool
        """
        return self._is_deprecated

    @is_deprecated.setter
    def is_deprecated(self, is_deprecated):
        """
        Sets the is_deprecated of this GateSpec.
        True if this gate is deprecated

        :param is_deprecated: The is_deprecated of this GateSpec.
        :type is_deprecated: bool
        """

        self._is_deprecated = is_deprecated

    @property
    def superceded_by(self):
        """
        Gets the superceded_by of this GateSpec.
        The name of another gate that supercedes this on functionally if this is deprecated

        :return: The superceded_by of this GateSpec.
        :rtype: str
        """
        return self._superceded_by

    @superceded_by.setter
    def superceded_by(self, superceded_by):
        """
        Sets the superceded_by of this GateSpec.
        The name of another gate that supercedes this on functionally if this is deprecated

        :param superceded_by: The superceded_by of this GateSpec.
        :type superceded_by: str
        """

        self._superceded_by = superceded_by

    @property
    def triggers(self):
        """
        Gets the triggers of this GateSpec.
        List of the triggers that can fire for this Gate

        :return: The triggers of this GateSpec.
        :rtype: List[TriggerSpec]
        """
        return self._triggers

    @triggers.setter
    def triggers(self, triggers):
        """
        Sets the triggers of this GateSpec.
        List of the triggers that can fire for this Gate

        :param triggers: The triggers of this GateSpec.
        :type triggers: List[TriggerSpec]
        """

        self._triggers = triggers

