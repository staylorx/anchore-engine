swagger: "2.0"
info:
  description: "This is a policy evaluation service. It receives push-events from external systems for data updates and provides an api for requesting image policy checks"
  version: "1.0.0"
  title: "anchore_engine.services.policy_engine"
  contact:
    email: "zach@anchore.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
basePath: "/v1"
schemes:
- https
- http
securityDefinitions:
  anchore_basic:
    type: basic
security:
  - anchore_basic: []
paths:
  /policy_spec:
    get:
      summary: Describe the policy language spec implemented by this service.
      description: Get the policy language spec for this service
      operationId: describe_policy
      produces:
      - application/json
      responses:
        200:
          description: Policy Language Description
          schema:
            type: array
            items:
              $ref: "#/definitions/GateSpec"
      x-swagger-router-controller: anchore_engine.services.policy_engine.api.controllers.synchronous_operations
  /status:
    get:
      summary: Get the status of the service
      description: Check the status  of the service
      operationId: get_status
      produces:
      - application/json
      responses:
        200:
          description: service status
          schema:
            type: object
      x-swagger-router-controller: anchore_engine.services.policy_engine.api.controllers.synchronous_operations
  /distro_mappings:
    get:
      x-swagger-router-controller: anchore_engine.services.policy_engine.api.controllers.distro_mappings
      operationId: list_distro_mappings
      summary: Get the list of distro mappings for cve matches
      description: Returns a list if name, map-to pairs used to map a known distro name to another namespace for cve matches
      produces:
      - application/json
      responses:
        200:
          description: "Listing of distro namespace mappings"
          schema:
            type: array
            items:
              $ref: "#/definitions/DistroMapping"
    post:
      x-swagger-router-controller: anchore_engine.services.policy_engine.api.controllers.distro_mappings
      operationId: add_distro_mapping
      summary: Add a new mapping
      description: Adds a new mapping entry to the system. Idempotent if already exists or error if not identical
      produces:
      - application/json
      parameters:
      - name: distro_mapping
        in: body
        required: true
        schema:
          $ref: "#/definitions/DistroMapping"
      responses:
        200:
          description: "Resulting complete list of distro mappings, as returned by GET"
          schema:
            type: array
            items:
              $ref: "#/definitions/DistroMapping"
    delete:
      x-swagger-router-controller: anchore_engine.services.policy_engine.api.controllers.distro_mappings
      operationId: delete_distro_mapping
      summary: Remove a specific mapping
      description: Removes a specific distro mapping by the mapping name
      parameters:
      - name: from_distro
        in: query
        type: string
        description: The distro name of the mapping to remove
      produces:
      - application/json
      responses:
        200:
          description: "Resulting complete list of distro mappings, as returned by GET"
          schema:
            type: array
            items:
              $ref: "#/definitions/DistroMapping"
  /users:
    get:
      x-swagger-router-controller: anchore_engine.services.policy_engine.api.controllers.synchronous_operations
      operationId: list_image_users
      summary: "List user ids known to the eval system"
      description: "Listing of the namespaces in the service"
      produces:
      - "application/json"
      parameters:
      - name: "page"
        in: query
        type: "integer"
        required: false
      responses:
        200:
          description: "User id listing"
          schema:
            type: array
            items:
              type: string
  /images:
    post:
      x-swagger-router-controller: anchore_engine.services.policy_engine.api.controllers.synchronous_operations
      operationId: ingress_image
      summary: "Add a new image to the system, as an async task"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "ingress_request"
        in: "body"
        schema:
          $ref: "#/definitions/ImageIngressRequest"
        required: true
      responses:
        200:
          description: "Image accepted"
          schema:
            $ref: "#/definitions/ImageIngressResponse"
        400:
          description: "Bad request"
  /users/{user_id}/images:
    get:
      x-swagger-router-controller: anchore_engine.services.policy_engine.api.controllers.synchronous_operations
      operationId: list_user_images
      summary: "List the image ids for the specified user"
      description: "List the image summary for each image in this user namespace"
      produces:
      - "application/json"
      parameters:
      - name: "user_id"
        in: "path"
        type: string
        description: "user id string of catalog user"
        required: true
      responses:
        200:
          description: "Image summary listing"
          schema:
            type: array
            items:
              $ref: "#/definitions/Image"
        404:
          description: "User id not found in this service"
  /users/{user_id}/images/{image_id}:
    delete:
      x-swagger-router-controller: anchore_engine.services.policy_engine.api.controllers.synchronous_operations
      operationId: delete_image
      summary: "Delete the referenced image"
      description: "Deletes the image and all artifacts from the image including cve matches"
      produces:
      - "application/json"
      parameters:
      - name: "user_id"
        in: "path"
        type: string
        required: true
      - name: "image_id"
        in: path
        type: string
        required: true
      responses:
        204:
          description: "Empty response on success"
        404:
          description: "Image not found"
        500:
          description: "Internal Error"
  /users/{user_id}/images/{image_id}/vulnerabilities:
    get:
      x-swagger-router-controller: anchore_engine.services.policy_engine.api.controllers.synchronous_operations
      operationId: get_image_vulnerabilities
      summary: "Return the vulnerabilitiy report for the image"
      description: "Returns the latest vulnerability listing for the requested image"
      produces:
      - "application/json"
      parameters:
      - name: "user_id"
        in: "path"
        type: string
        required: true
      - name: "image_id"
        in: path
        type: string
        required: true
      - name: "force_refresh"
        in: "query"
        type: boolean
        required: false
      responses:
        200:
          description: "Vulnerability listing"
          schema:
            $ref: "#/definitions/ImageVulnerabilityListing"
        404:
          description: "Image not found"
        500:
          description: "Internal Error"
  /users/{user_id}/images/{image_id}/check_inline:
    post:
      x-swagger-router-controller: anchore_engine.services.policy_engine.api.controllers.synchronous_operations
      operationId: check_user_image_inline
      summary: "List the image ids for the specified user"
      description: "List the image summary for each image in this user namespace"
      produces:
      - "application/json"
      parameters:
      - name: "user_id"
        in: "path"
        type: string
        description: "user id string of catalog user"
        required: true
      - name: "image_id"
        in: path
        type: string
        required: true
      - name: "tag"
        in: query
        type: string
        required: true
      - name: "bundle"
        in: body
        schema:
          $ref: "#/definitions/PolicyBundle"
      responses:
        200:
          description: "Policy Evaluation result"
          schema:
            $ref: "#/definitions/PolicyEvaluation"
        404:
          description: "User id not found in this service"
  /notifications/feeds:
    post:
      x-swagger-router-controller: anchore_engine.services.policy_engine.api.controllers.synchronous_operations
      operationId: create_feed_update
      description: "Send the system a feed update notification"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "notification"
        in: "body"
        required: true
        schema:
          $ref: "#/definitions/FeedUpdateNotification"
      responses:
        200:
          description: "Processed successfully"
          schema:
            type: array
            items:
              description: List of userid/image_ids updated by the sync
              type: string
        500:
          description: "Internal server error processing the request. Retry expected"
        400:
          description: "Bad request, fix and resend"
  /validate_bundle:
    post:
      x-swagger-router-controller: anchore_engine.services.policy_engine.api.controllers.synchronous_operations
      operationId: validate_bundle
      description: "Perform a policy bundle validation against the included bundle"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "policy_bundle"
        in: body
        required: true
        schema:
          $ref: "#/definitions/PolicyBundle"
      responses:
        200:
          description: "Validation completed, returning result"
          schema:
            $ref: "#/definitions/PolicyValidationResponse"
        400:
          description: "Bad request, likely problem in json structure of policy_bundle"
        500:
          description: "Internal server error processing the request."
definitions:
  Image:
    type: object
    properties:
      id:
        type: string
      digest:
        type: string
      user_id:
        type: string
      state:
        type: string
        description: "State of the image in the policy evaluation system"
        enum:
        - "failed"
        - "initializing"
        - "analyzing"
        - "analyzed"
      distro_namespace:
        type: string
        description: "The namespace identifier for this image for purposes of CVE matches, etc"
      created_at:
        type: string
        format: "date-time"
        description: "The timestamp on when this image record was created, not the image itself"
      last_modified:
        type: string
        format: "date-time"
        description: "Time the image record in this service was last updated"
      tags:
        type: array
        description: "List of tags currently applied to the image. Updated by new tag events. Similarly scoped by the user_id"
        items:
          type: string
  Tag:
    type: object
    properties:
      user_id:
        type: string
        description: "The catalog user id that scopes this tag value. NOT a username on the source registry"
      registry_name:
        type: string
        description: "The registry record name in the catalog to identify the repository. Scoped by the user_id. Eg. dockerhub"
      repository:
        type: string
        description: "Repository name, including any source registry user namespace for the tag. e.g. library/centos or bitnami/node"
      name:
        type: string
        description: "The name of the tag. e.g. latest, 8.0, or 5.4-alpine"
  ErrorResponse:
    type: object
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: string
      message:
        type: string
  VulnerabilityListing:
    type: object
    properties:
      image_id:
        type: string
      user_id:
        type: string
      content:
        type: object
        $ref: "#/definitions/TableStyleResult"
  TableStyleResult:
    type: object
    description: "Legacy table-style output. Uses image_id as keys, so this schema is just a generic container"
  ImageUpdateNotification:
    type: object
    description: "A notification event sent to the service to indicate a new image is available for processing"
    properties:
      image_id:
        type: string
      user_id:
        type: string
      analysis_url:
        type: string
        description: "A url that can be used to retrieve the analysis information on the image"
      event_timestamp:
        type: string
        format: "date-time"
        description: "The time of the external event. Should be set to when the event occurred, to the delivery time"
  PolicyBundleUpdateNotification:
    type: object
    description: "A notification event to tell the service there is a new bundle or content in the bundle to process"
    properties:
      bundle_id:
        type: string
      event_timestamp:
        type: string
        format: "date-time"
        description: "The time of the external event. Should be set to when the event occurred, to the delivery time"
  FeedUpdateNotification:
    type: object
    description: "A notification event to tell the service there is new feed data to ingest. This is direct data injection"
    properties:
      event_timestamp:
        type: string
        format: "date-time"
        description: "The time of the external event. Should be set to when the event occurred, to the delivery time"
      feed_name:
        type: string
      feed_group:
        type: string
      data:
        type: "array"
        items:
          type: object
          description: "Generic object holder since each feed can have different data schemas"
  ImagePolicyCheckRequest:
    type: object
    description: "A request object that includes the image id, tag name, and bundle content to evaluate"
    properties:
      image_id:
        type: string
      tag:
        type: string
      user_id:
        type: string
      bundle:
        type: object
  UpdateEvent:
    type: object
    description: "A generic wrapper for inbound events to be handled by async workers"
    properties:
      event_type:
        type: string
        description: "Type identifier for the event content section for parsing"
      event_content:
        type: object
  EventStatus:
    type: object
    description: "Response and identifiers for events received by the system"
    properties:
      event_id:
        type: string
        description: "A generated event id for later use to query status of the event"
      event_timestamp:
        type: string
        format: "date-time"
      event_state:
        type: string
        description: "State of the event, as defined by an enum"
        enum:
        - "pending"
        - "processing"
        - "complete"
        - "failed"
  PolicyBundle:  
    description: "Formal schema for Anchore Policy Bundle documents"
    type: object
    required:
    - "id"
    - "version"
    - "mappings"
    - "policies"
    properties:
      id:
        type: string
        description: "Id of the bundle"
      name:
        type: string
      comment:
        type: string
      version:
        type: string
      whitelists:
        type: "array"
        items:
          $ref: "#/definitions/Whitelist"
      policies:
        type: "array"
        items:
          $ref: "#/definitions/Policy"
      mappings:
        type: "array"
        items:
          $ref: "#/definitions/MappingRule"
      whitelisted_images:
        description: List of mapping rules that define which images should always be passed (unless also on the blacklist), regardless of policy result.
        type: array
        items:
          $ref: "#/definitions/ImageSelectionRule"
      blacklisted_images:
        description: List of mapping rules that define which images should always result in a STOP/FAIL policy result regardless of policy content or presence in whitelisted_images
        type: array
        items:
          $ref: "#/definitions/ImageSelectionRule"
  WhitelistItem:
    type: object
    required:
    - "gate"
    - "trigger_id"
    properties:
      id:
        type: string
      gate:
        type: string
      trigger_id:
        type: string
  PolicyRule:
    type: object
    required:
    - "gate"
    - "trigger"
    - "action"
    properties:
      id:
        type: string
      gate:
        type: string
      trigger:
        type: string
      action:
        enum:
        - "GO"
        - "STOP"
        - "WARN"
      params:
        type: "array"
        items:
          type: object
          required:
          - "name"
          - "value"
          properties:
            name:
              type: string
            value:
              type: string
  Whitelist:
    type: object
    required:
    - "id"
    - "version"
    properties:
      id:
        type: string
      name:
        type: string
      version:
        type: string
      comment:
        type: string
      items:
        type: "array"
        items:
          $ref: "#/definitions/WhitelistItem"
  ImageRef:
    type: object
    required:
    - "type"
    - "value"
    properties:
      type:
        enum:
          - "tag"
          - "digest"
          - "id"
      value:
        type: string
  Policy:
    type: object
    required:
    - "id"
    - "version"
    properties:
      id:
        type: string
      name:
        type: string
      comment:
        type: string
      version:
        type: string
      rules:
        type: "array"
        items:
          $ref: "#/definitions/PolicyRule"
  ImageSelectionRule:
    type: object
    required:
    - "name"
    - "registry"
    - "repository"
    - "image"
    properties:
      id:
        type: string
      name:
        type: string
      registry:
        type: string
      repository:
        type: string
      image:
        $ref: "#/definitions/ImageRef"
  MappingRule:
    type: object
    required:
    - "name"
    - "whitelist_ids"
    - "policy_id"
    - "registry"
    - "repository"
    - "image"
    properties:
      id:
        type: string
      name:
        type: string
      whitelist_ids:
        type: "array"
        items:
          type: string
      policy_id:
        type: string
      registry:
        type: string
      repository:
        type: string
      image:
        $ref: "#/definitions/ImageRef"
  ImageVulnerabilityListing:
    type: object
    description: "Wrapper for the vulnerability report and legacy reports"
    properties:
      user_id:
        type: string
      image_id:
        type: string
      legacy_report:
        $ref: "#/definitions/LegacyVulnerabilityReport"
  LegacyVulnerabilityReport:
    type: object
    description: "Generic object container for the legecy cve report"
    properties:
      multi:
        type: object
        description: "Container object for a multi-image query result"
        properties:
          url_column_index:
            type: integer
            description: "The index for the url column, for parsing"
          result:
            type: object
            properties:
              rowcount:
                type: integer
              colcount:
                type: integer
              header:
                type: array
                description: "List of column names in the order the values appear in the rows section"
                items:
                  type: string
              rows:
                type: array
                description: "Data rows, each row has the same length and is colcount long"
                items:
                  type: array
                  description: "A single row entry, a list of strings in the specific order of the header"
                  items:
                    type: string
          warns:
            type: array
            description: "Array of warning messages generated during the last cve scan, if any"
            items:
              type: string
  ImageIngressRequest:
    type: object
    description: "Request to add an image to the service"
    required:
    - fetch_url
    - user_id
    - image_id
    properties:
      user_id:
        type: string
      image_id:
        type: string
      fetch_url:
        type: string
        description: "The url to pull image data from, if available. If None the system will ask the catalog endpoint"
  ImageIngressResponse:
    type: object
    description: "Indicates if the operation was accepted or not"
    properties:
      status:
        type: string
        enum:
        - accepted
        - failed
        - loaded
  PolicyEvaluation:
    type: object
    description: 'A policy bundle evaluation result for a specific image, tag, policy tuple'
    required:
      - image_id
      - bundle
      - tag
      - final_action
      - matched_mapping_rule
      - result
      - matched_whitelisted_images_rule
      - matched_blacklisted_images_rule
      - final_action_reason
    properties:
      user_id:
        type: string
        description: Unique identifier (UUID) for the catalog user
      image_id:
        type: string
      tag:
        type: string
      bundle:
        type: object
        description: The bundle used for evaluation
      matched_mapping_rule:
        type: object
        description: >-
          The bundle mapping rule that was evaluated to result in the evaluated
          policy and whitelists being selected
      matched_whitelisted_images_rule:
        type: object
        description: The trusted image entry matched if any
      matched_blacklisted_images_rule:
        type: object
        description: The image blacklist entry matched if any
      result:
        type: object
        description: >-
          Object containing the evaluation result for the given policy and
          whitelists against the image
      created_at:
        type: integer
        description: Epoch time on server of record creation
      last_modified:
        type: integer
        description: Epoch time on server of last modification
      final_action:
        type: string
        description: The overall outcome of the evaluation. STOP|GO|WARN
      final_action_reason:
        type: string
        description: The reason for the final result
        enum:
        - whitelisted
        - blacklisted
        - policy_evaluation
      evaluation_problems:
        type: array
        description: list of error objects indicating errors encountered during evaluation execution
        items:
          $ref: "#/definitions/PolicyEvaluationProblem"
  PolicyBundleLight:
    type: object
    required:
      - image_id
      - policy
    properties:
      image_id:
        type: string
      policy:
        $ref: "#/definitions/Policy"
      whitelists:
        type: "array"
        items:
          $ref: "#/definitions/Whitelist"
  PolicyEvaluationLight:
    type: object
    properties:
      timestamp:
        type: string
      image_id:
        type: string
      policy:
        $ref: "#/definitions/Policy"
      whitelists:
        type: array
        items:
          $ref: "#/definitions/Whitelist"
      evaluation_result:
        type: object
      evaluation_problems:
        type: array
        description: list of error objects indicating errors encountered during evaluation execution
        items:
          $ref: "#/definitions/PolicyEvaluationProblem"
  PolicyEvaluationProblem:
    type: object
    description: Details for an error or warning indicating a problem during policy evaluation
    required:
    - severity
    - problem_type
    - details
    properties:
      severity:
        type: string
        description: severity string such as "warn", "error", "fatal"
      problem_type:
        type: string
        description: the type of problem encountered, such as a misconfiguration or unavailable data
      details:
        type: string
        description: Details about the problem itself and how to fix it
  DistroMapping:
    type: object
    properties:
      from_distro:
        type: string
        description: The name of the distro to map as would be reported in the image itself from a file like /etc/os_release
      to_distro:
        type: string
        description: The distro name to use instead for cve matching purposes.
      flavor:
        type: string
        description: The flavor of the distro
      created_at:
        type: string
        description: Timestamp of mapping creation
        format: "date-time"
  GateSpec:
    type: object
    description: A description of the set of gates available in this engine and the triggers and parameters supported
    properties:
      name:
        type: string
        description: Gate name, as it would appear in a policy document
      description:
        type: string
        description: Description of the gate
      is_deprecated:
        type: boolean
        description: True if this gate is deprecated
      superceded_by:
        type: string
        description: The name of another gate that supercedes this on functionally if this is deprecated
      triggers:
        type: array
        description: List of the triggers that can fire for this Gate
        items:
          $ref: "#/definitions/TriggerSpec"
  TriggerSpec:
    type: object
    description: Definition of a trigger and its parameters
    properties:
      name:
        type: string
        description: Name of the trigger as it would appear in a policy document
      description:
        type: string
        description: Trigger description for what it tests and when it will fire during evaluation
      is_deprecated:
        type: boolean
        description: True if this trigger is deprecated
      superceded_by:
        type: string
        description: The name of another trigger that supercedes this on functionally if this is deprecated
      parameters:
        type: array
        description: The list of parameters that are valid for this trigger
        items:
          $ref: "#/definitions/TriggerParamSpec"
  TriggerParamSpec:
    type: object
    properties:
      name:
        type: string
        description: Parameter name as it appears in policy document
      description:
        type: string
      required:
        description: Is this a required parameter or optional. If required it must be present in the json and validate based on the provided validator. If optional it can be present in json and null or omitted.
        type: boolean
      is_deprecated:
        type: boolean
        description: True if this gate is deprecated
      superceded_by:
        type: string
        description: The name of another gate that supercedes this on functionally if this is deprecated
      validator:
        type: object
        description: If present, a definition for validation of input. Typically a jsonschema object that can be used to validate an input against.
  PolicyValidationResponse:
    type: object
    description: A response containing details for a policy validation including pass/fail and and validation errors found.
    properties:
      valid:
        type: boolean
        description: The validation result. If True, the policy bundle is valid. If False, it is invalid and there should be content in the validation_details property.
      validation_details:
        type: array
        description: An array of validation details including error messages as appropriate. Will be empty on a successful validation.
        items:
          $ref: "#/definitions/PolicyEvaluationProblem"
