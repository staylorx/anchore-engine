# coding: utf-8

"""
    anchore_engine.services.policy_engine

    This is a policy evaluation service. It receives push-events from external systems for data updates and provides an api for requesting image policy checks  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: zach@anchore.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from anchore_engine.clients.policy_engine.generated.api_client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_distro_mapping(self, distro_mapping, **kwargs):  # noqa: E501
        """Add a new mapping  # noqa: E501

        Adds a new mapping entry to the system. Idempotent if already exists or error if not identical  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_distro_mapping(distro_mapping, async=True)
        >>> result = thread.get()

        :param async bool
        :param DistroMapping distro_mapping: (required)
        :return: list[DistroMapping]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.add_distro_mapping_with_http_info(distro_mapping, **kwargs)  # noqa: E501
        else:
            (data) = self.add_distro_mapping_with_http_info(distro_mapping, **kwargs)  # noqa: E501
            return data

    def add_distro_mapping_with_http_info(self, distro_mapping, **kwargs):  # noqa: E501
        """Add a new mapping  # noqa: E501

        Adds a new mapping entry to the system. Idempotent if already exists or error if not identical  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_distro_mapping_with_http_info(distro_mapping, async=True)
        >>> result = thread.get()

        :param async bool
        :param DistroMapping distro_mapping: (required)
        :return: list[DistroMapping]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['distro_mapping']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_distro_mapping" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'distro_mapping' is set
        if ('distro_mapping' not in params or
                params['distro_mapping'] is None):
            raise ValueError("Missing the required parameter `distro_mapping` when calling `add_distro_mapping`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'distro_mapping' in params:
            body_params = params['distro_mapping']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['anchore_basic']  # noqa: E501

        return self.api_client.call_api(
            '/distro_mappings', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DistroMapping]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def check_user_image_inline(self, user_id, image_id, tag, **kwargs):  # noqa: E501
        """List the image ids for the specified user  # noqa: E501

        List the image summary for each image in this user namespace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.check_user_image_inline(user_id, image_id, tag, async=True)
        >>> result = thread.get()

        :param async bool
        :param str user_id: user id string of catalog user (required)
        :param str image_id: (required)
        :param str tag: (required)
        :param PolicyBundle bundle:
        :return: PolicyEvaluation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.check_user_image_inline_with_http_info(user_id, image_id, tag, **kwargs)  # noqa: E501
        else:
            (data) = self.check_user_image_inline_with_http_info(user_id, image_id, tag, **kwargs)  # noqa: E501
            return data

    def check_user_image_inline_with_http_info(self, user_id, image_id, tag, **kwargs):  # noqa: E501
        """List the image ids for the specified user  # noqa: E501

        List the image summary for each image in this user namespace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.check_user_image_inline_with_http_info(user_id, image_id, tag, async=True)
        >>> result = thread.get()

        :param async bool
        :param str user_id: user id string of catalog user (required)
        :param str image_id: (required)
        :param str tag: (required)
        :param PolicyBundle bundle:
        :return: PolicyEvaluation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'image_id', 'tag', 'bundle']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method check_user_image_inline" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `check_user_image_inline`")  # noqa: E501
        # verify the required parameter 'image_id' is set
        if ('image_id' not in params or
                params['image_id'] is None):
            raise ValueError("Missing the required parameter `image_id` when calling `check_user_image_inline`")  # noqa: E501
        # verify the required parameter 'tag' is set
        if ('tag' not in params or
                params['tag'] is None):
            raise ValueError("Missing the required parameter `tag` when calling `check_user_image_inline`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501
        if 'image_id' in params:
            path_params['image_id'] = params['image_id']  # noqa: E501

        query_params = []
        if 'tag' in params:
            query_params.append(('tag', params['tag']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'bundle' in params:
            body_params = params['bundle']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['anchore_basic']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user_id}/images/{image_id}/check_inline', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PolicyEvaluation',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_feed_update(self, notification, **kwargs):  # noqa: E501
        """create_feed_update  # noqa: E501

        Send the system a feed update notification  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_feed_update(notification, async=True)
        >>> result = thread.get()

        :param async bool
        :param FeedUpdateNotification notification: (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_feed_update_with_http_info(notification, **kwargs)  # noqa: E501
        else:
            (data) = self.create_feed_update_with_http_info(notification, **kwargs)  # noqa: E501
            return data

    def create_feed_update_with_http_info(self, notification, **kwargs):  # noqa: E501
        """create_feed_update  # noqa: E501

        Send the system a feed update notification  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_feed_update_with_http_info(notification, async=True)
        >>> result = thread.get()

        :param async bool
        :param FeedUpdateNotification notification: (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['notification']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_feed_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'notification' is set
        if ('notification' not in params or
                params['notification'] is None):
            raise ValueError("Missing the required parameter `notification` when calling `create_feed_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'notification' in params:
            body_params = params['notification']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['anchore_basic']  # noqa: E501

        return self.api_client.call_api(
            '/notifications/feeds', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_distro_mapping(self, **kwargs):  # noqa: E501
        """Remove a specific mapping  # noqa: E501

        Removes a specific distro mapping by the mapping name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_distro_mapping(async=True)
        >>> result = thread.get()

        :param async bool
        :param str from_distro: The distro name of the mapping to remove
        :return: list[DistroMapping]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_distro_mapping_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_distro_mapping_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_distro_mapping_with_http_info(self, **kwargs):  # noqa: E501
        """Remove a specific mapping  # noqa: E501

        Removes a specific distro mapping by the mapping name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_distro_mapping_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str from_distro: The distro name of the mapping to remove
        :return: list[DistroMapping]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['from_distro']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_distro_mapping" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'from_distro' in params:
            query_params.append(('from_distro', params['from_distro']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['anchore_basic']  # noqa: E501

        return self.api_client.call_api(
            '/distro_mappings', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DistroMapping]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_image(self, user_id, image_id, **kwargs):  # noqa: E501
        """Delete the referenced image  # noqa: E501

        Deletes the image and all artifacts from the image including cve matches  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_image(user_id, image_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str user_id: (required)
        :param str image_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_image_with_http_info(user_id, image_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_image_with_http_info(user_id, image_id, **kwargs)  # noqa: E501
            return data

    def delete_image_with_http_info(self, user_id, image_id, **kwargs):  # noqa: E501
        """Delete the referenced image  # noqa: E501

        Deletes the image and all artifacts from the image including cve matches  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_image_with_http_info(user_id, image_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str user_id: (required)
        :param str image_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'image_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_image" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `delete_image`")  # noqa: E501
        # verify the required parameter 'image_id' is set
        if ('image_id' not in params or
                params['image_id'] is None):
            raise ValueError("Missing the required parameter `image_id` when calling `delete_image`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501
        if 'image_id' in params:
            path_params['image_id'] = params['image_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['anchore_basic']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user_id}/images/{image_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def describe_policy(self, **kwargs):  # noqa: E501
        """Describe the policy language spec implemented by this service.  # noqa: E501

        Get the policy language spec for this service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.describe_policy(async=True)
        >>> result = thread.get()

        :param async bool
        :return: list[GateSpec]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.describe_policy_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.describe_policy_with_http_info(**kwargs)  # noqa: E501
            return data

    def describe_policy_with_http_info(self, **kwargs):  # noqa: E501
        """Describe the policy language spec implemented by this service.  # noqa: E501

        Get the policy language spec for this service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.describe_policy_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: list[GateSpec]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method describe_policy" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['anchore_basic']  # noqa: E501

        return self.api_client.call_api(
            '/policy_spec', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GateSpec]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_image_vulnerabilities(self, user_id, image_id, **kwargs):  # noqa: E501
        """Return the vulnerabilitiy report for the image  # noqa: E501

        Returns the latest vulnerability listing for the requested image  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_image_vulnerabilities(user_id, image_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str user_id: (required)
        :param str image_id: (required)
        :param bool force_refresh:
        :return: ImageVulnerabilityListing
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_image_vulnerabilities_with_http_info(user_id, image_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_image_vulnerabilities_with_http_info(user_id, image_id, **kwargs)  # noqa: E501
            return data

    def get_image_vulnerabilities_with_http_info(self, user_id, image_id, **kwargs):  # noqa: E501
        """Return the vulnerabilitiy report for the image  # noqa: E501

        Returns the latest vulnerability listing for the requested image  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_image_vulnerabilities_with_http_info(user_id, image_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str user_id: (required)
        :param str image_id: (required)
        :param bool force_refresh:
        :return: ImageVulnerabilityListing
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'image_id', 'force_refresh']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_image_vulnerabilities" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `get_image_vulnerabilities`")  # noqa: E501
        # verify the required parameter 'image_id' is set
        if ('image_id' not in params or
                params['image_id'] is None):
            raise ValueError("Missing the required parameter `image_id` when calling `get_image_vulnerabilities`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501
        if 'image_id' in params:
            path_params['image_id'] = params['image_id']  # noqa: E501

        query_params = []
        if 'force_refresh' in params:
            query_params.append(('force_refresh', params['force_refresh']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['anchore_basic']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user_id}/images/{image_id}/vulnerabilities', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ImageVulnerabilityListing',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_status(self, **kwargs):  # noqa: E501
        """Get the status of the service  # noqa: E501

        Check the status  of the service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_status(async=True)
        >>> result = thread.get()

        :param async bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_status_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_status_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_status_with_http_info(self, **kwargs):  # noqa: E501
        """Get the status of the service  # noqa: E501

        Check the status  of the service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_status_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_status" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['anchore_basic']  # noqa: E501

        return self.api_client.call_api(
            '/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ingress_image(self, ingress_request, **kwargs):  # noqa: E501
        """Add a new image to the system, as an async task  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.ingress_image(ingress_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param ImageIngressRequest ingress_request: (required)
        :return: ImageIngressResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.ingress_image_with_http_info(ingress_request, **kwargs)  # noqa: E501
        else:
            (data) = self.ingress_image_with_http_info(ingress_request, **kwargs)  # noqa: E501
            return data

    def ingress_image_with_http_info(self, ingress_request, **kwargs):  # noqa: E501
        """Add a new image to the system, as an async task  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.ingress_image_with_http_info(ingress_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param ImageIngressRequest ingress_request: (required)
        :return: ImageIngressResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ingress_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ingress_image" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ingress_request' is set
        if ('ingress_request' not in params or
                params['ingress_request'] is None):
            raise ValueError("Missing the required parameter `ingress_request` when calling `ingress_image`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'ingress_request' in params:
            body_params = params['ingress_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['anchore_basic']  # noqa: E501

        return self.api_client.call_api(
            '/images', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ImageIngressResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_distro_mappings(self, **kwargs):  # noqa: E501
        """Get the list of distro mappings for cve matches  # noqa: E501

        Returns a list if name, map-to pairs used to map a known distro name to another namespace for cve matches  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_distro_mappings(async=True)
        >>> result = thread.get()

        :param async bool
        :return: list[DistroMapping]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_distro_mappings_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_distro_mappings_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_distro_mappings_with_http_info(self, **kwargs):  # noqa: E501
        """Get the list of distro mappings for cve matches  # noqa: E501

        Returns a list if name, map-to pairs used to map a known distro name to another namespace for cve matches  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_distro_mappings_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: list[DistroMapping]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_distro_mappings" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['anchore_basic']  # noqa: E501

        return self.api_client.call_api(
            '/distro_mappings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DistroMapping]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_image_users(self, **kwargs):  # noqa: E501
        """List user ids known to the eval system  # noqa: E501

        Listing of the namespaces in the service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_image_users(async=True)
        >>> result = thread.get()

        :param async bool
        :param int page:
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_image_users_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_image_users_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_image_users_with_http_info(self, **kwargs):  # noqa: E501
        """List user ids known to the eval system  # noqa: E501

        Listing of the namespaces in the service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_image_users_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int page:
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_image_users" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['anchore_basic']  # noqa: E501

        return self.api_client.call_api(
            '/users', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_user_images(self, user_id, **kwargs):  # noqa: E501
        """List the image ids for the specified user  # noqa: E501

        List the image summary for each image in this user namespace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_user_images(user_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str user_id: user id string of catalog user (required)
        :return: list[Image]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_user_images_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_user_images_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def list_user_images_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """List the image ids for the specified user  # noqa: E501

        List the image summary for each image in this user namespace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_user_images_with_http_info(user_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str user_id: user id string of catalog user (required)
        :return: list[Image]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_user_images" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `list_user_images`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['anchore_basic']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user_id}/images', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Image]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def validate_bundle(self, policy_bundle, **kwargs):  # noqa: E501
        """validate_bundle  # noqa: E501

        Perform a policy bundle validation against the included bundle  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.validate_bundle(policy_bundle, async=True)
        >>> result = thread.get()

        :param async bool
        :param PolicyBundle policy_bundle: (required)
        :return: PolicyValidationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.validate_bundle_with_http_info(policy_bundle, **kwargs)  # noqa: E501
        else:
            (data) = self.validate_bundle_with_http_info(policy_bundle, **kwargs)  # noqa: E501
            return data

    def validate_bundle_with_http_info(self, policy_bundle, **kwargs):  # noqa: E501
        """validate_bundle  # noqa: E501

        Perform a policy bundle validation against the included bundle  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.validate_bundle_with_http_info(policy_bundle, async=True)
        >>> result = thread.get()

        :param async bool
        :param PolicyBundle policy_bundle: (required)
        :return: PolicyValidationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['policy_bundle']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method validate_bundle" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'policy_bundle' is set
        if ('policy_bundle' not in params or
                params['policy_bundle'] is None):
            raise ValueError("Missing the required parameter `policy_bundle` when calling `validate_bundle`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'policy_bundle' in params:
            body_params = params['policy_bundle']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['anchore_basic']  # noqa: E501

        return self.api_client.call_api(
            '/validate_bundle', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PolicyValidationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
