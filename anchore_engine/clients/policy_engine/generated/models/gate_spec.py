# coding: utf-8

"""
    anchore_engine.services.policy_engine

    This is a policy evaluation service. It receives push-events from external systems for data updates and provides an api for requesting image policy checks

    OpenAPI spec version: 1.0.0
    Contact: zach@anchore.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class GateSpec(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'is_deprecated': 'bool',
        'superceded_by': 'str',
        'triggers': 'list[TriggerSpec]'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'is_deprecated': 'is_deprecated',
        'superceded_by': 'superceded_by',
        'triggers': 'triggers'
    }

    def __init__(self, name=None, description=None, is_deprecated=None, superceded_by=None, triggers=None):
        """
        GateSpec - a model defined in Swagger
        """

        self._name = None
        self._description = None
        self._is_deprecated = None
        self._superceded_by = None
        self._triggers = None

        if name is not None:
          self.name = name
        if description is not None:
          self.description = description
        if is_deprecated is not None:
          self.is_deprecated = is_deprecated
        if superceded_by is not None:
          self.superceded_by = superceded_by
        if triggers is not None:
          self.triggers = triggers

    @property
    def name(self):
        """
        Gets the name of this GateSpec.
        Gate name, as it would appear in a policy document

        :return: The name of this GateSpec.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this GateSpec.
        Gate name, as it would appear in a policy document

        :param name: The name of this GateSpec.
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this GateSpec.
        Description of the gate

        :return: The description of this GateSpec.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this GateSpec.
        Description of the gate

        :param description: The description of this GateSpec.
        :type: str
        """

        self._description = description

    @property
    def is_deprecated(self):
        """
        Gets the is_deprecated of this GateSpec.
        True if this gate is deprecated

        :return: The is_deprecated of this GateSpec.
        :rtype: bool
        """
        return self._is_deprecated

    @is_deprecated.setter
    def is_deprecated(self, is_deprecated):
        """
        Sets the is_deprecated of this GateSpec.
        True if this gate is deprecated

        :param is_deprecated: The is_deprecated of this GateSpec.
        :type: bool
        """

        self._is_deprecated = is_deprecated

    @property
    def superceded_by(self):
        """
        Gets the superceded_by of this GateSpec.
        The name of another gate that supercedes this on functionally if this is deprecated

        :return: The superceded_by of this GateSpec.
        :rtype: str
        """
        return self._superceded_by

    @superceded_by.setter
    def superceded_by(self, superceded_by):
        """
        Sets the superceded_by of this GateSpec.
        The name of another gate that supercedes this on functionally if this is deprecated

        :param superceded_by: The superceded_by of this GateSpec.
        :type: str
        """

        self._superceded_by = superceded_by

    @property
    def triggers(self):
        """
        Gets the triggers of this GateSpec.
        List of the triggers that can fire for this Gate

        :return: The triggers of this GateSpec.
        :rtype: list[TriggerSpec]
        """
        return self._triggers

    @triggers.setter
    def triggers(self, triggers):
        """
        Sets the triggers of this GateSpec.
        List of the triggers that can fire for this Gate

        :param triggers: The triggers of this GateSpec.
        :type: list[TriggerSpec]
        """

        self._triggers = triggers

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, GateSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
