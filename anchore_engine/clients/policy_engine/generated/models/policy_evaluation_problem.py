# coding: utf-8

"""
    anchore_engine.services.policy_engine

    This is a policy evaluation service. It receives push-events from external systems for data updates and provides an api for requesting image policy checks  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: zach@anchore.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PolicyEvaluationProblem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'severity': 'str',
        'problem_type': 'str',
        'details': 'str'
    }

    attribute_map = {
        'severity': 'severity',
        'problem_type': 'problem_type',
        'details': 'details'
    }

    def __init__(self, severity=None, problem_type=None, details=None):  # noqa: E501
        """PolicyEvaluationProblem - a model defined in Swagger"""  # noqa: E501

        self._severity = None
        self._problem_type = None
        self._details = None
        self.discriminator = None

        self.severity = severity
        self.problem_type = problem_type
        self.details = details

    @property
    def severity(self):
        """Gets the severity of this PolicyEvaluationProblem.  # noqa: E501

        severity string such as \"warn\", \"error\", \"fatal\"  # noqa: E501

        :return: The severity of this PolicyEvaluationProblem.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this PolicyEvaluationProblem.

        severity string such as \"warn\", \"error\", \"fatal\"  # noqa: E501

        :param severity: The severity of this PolicyEvaluationProblem.  # noqa: E501
        :type: str
        """
        if severity is None:
            raise ValueError("Invalid value for `severity`, must not be `None`")  # noqa: E501

        self._severity = severity

    @property
    def problem_type(self):
        """Gets the problem_type of this PolicyEvaluationProblem.  # noqa: E501

        the type of problem encountered, such as a misconfiguration or unavailable data  # noqa: E501

        :return: The problem_type of this PolicyEvaluationProblem.  # noqa: E501
        :rtype: str
        """
        return self._problem_type

    @problem_type.setter
    def problem_type(self, problem_type):
        """Sets the problem_type of this PolicyEvaluationProblem.

        the type of problem encountered, such as a misconfiguration or unavailable data  # noqa: E501

        :param problem_type: The problem_type of this PolicyEvaluationProblem.  # noqa: E501
        :type: str
        """
        if problem_type is None:
            raise ValueError("Invalid value for `problem_type`, must not be `None`")  # noqa: E501

        self._problem_type = problem_type

    @property
    def details(self):
        """Gets the details of this PolicyEvaluationProblem.  # noqa: E501

        Details about the problem itself and how to fix it  # noqa: E501

        :return: The details of this PolicyEvaluationProblem.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this PolicyEvaluationProblem.

        Details about the problem itself and how to fix it  # noqa: E501

        :param details: The details of this PolicyEvaluationProblem.  # noqa: E501
        :type: str
        """
        if details is None:
            raise ValueError("Invalid value for `details`, must not be `None`")  # noqa: E501

        self._details = details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PolicyEvaluationProblem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
