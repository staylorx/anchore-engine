# coding: utf-8

"""
    anchore_engine.services.policy_engine

    This is a policy evaluation service. It receives push-events from external systems for data updates and provides an api for requesting image policy checks  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: zach@anchore.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class FeedUpdateNotification(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'event_timestamp': 'datetime',
        'feed_name': 'str',
        'feed_group': 'str',
        'data': 'list[object]'
    }

    attribute_map = {
        'event_timestamp': 'event_timestamp',
        'feed_name': 'feed_name',
        'feed_group': 'feed_group',
        'data': 'data'
    }

    def __init__(self, event_timestamp=None, feed_name=None, feed_group=None, data=None):  # noqa: E501
        """FeedUpdateNotification - a model defined in Swagger"""  # noqa: E501

        self._event_timestamp = None
        self._feed_name = None
        self._feed_group = None
        self._data = None
        self.discriminator = None

        if event_timestamp is not None:
            self.event_timestamp = event_timestamp
        if feed_name is not None:
            self.feed_name = feed_name
        if feed_group is not None:
            self.feed_group = feed_group
        if data is not None:
            self.data = data

    @property
    def event_timestamp(self):
        """Gets the event_timestamp of this FeedUpdateNotification.  # noqa: E501

        The time of the external event. Should be set to when the event occurred, to the delivery time  # noqa: E501

        :return: The event_timestamp of this FeedUpdateNotification.  # noqa: E501
        :rtype: datetime
        """
        return self._event_timestamp

    @event_timestamp.setter
    def event_timestamp(self, event_timestamp):
        """Sets the event_timestamp of this FeedUpdateNotification.

        The time of the external event. Should be set to when the event occurred, to the delivery time  # noqa: E501

        :param event_timestamp: The event_timestamp of this FeedUpdateNotification.  # noqa: E501
        :type: datetime
        """

        self._event_timestamp = event_timestamp

    @property
    def feed_name(self):
        """Gets the feed_name of this FeedUpdateNotification.  # noqa: E501


        :return: The feed_name of this FeedUpdateNotification.  # noqa: E501
        :rtype: str
        """
        return self._feed_name

    @feed_name.setter
    def feed_name(self, feed_name):
        """Sets the feed_name of this FeedUpdateNotification.


        :param feed_name: The feed_name of this FeedUpdateNotification.  # noqa: E501
        :type: str
        """

        self._feed_name = feed_name

    @property
    def feed_group(self):
        """Gets the feed_group of this FeedUpdateNotification.  # noqa: E501


        :return: The feed_group of this FeedUpdateNotification.  # noqa: E501
        :rtype: str
        """
        return self._feed_group

    @feed_group.setter
    def feed_group(self, feed_group):
        """Sets the feed_group of this FeedUpdateNotification.


        :param feed_group: The feed_group of this FeedUpdateNotification.  # noqa: E501
        :type: str
        """

        self._feed_group = feed_group

    @property
    def data(self):
        """Gets the data of this FeedUpdateNotification.  # noqa: E501


        :return: The data of this FeedUpdateNotification.  # noqa: E501
        :rtype: list[object]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this FeedUpdateNotification.


        :param data: The data of this FeedUpdateNotification.  # noqa: E501
        :type: list[object]
        """

        self._data = data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FeedUpdateNotification):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
