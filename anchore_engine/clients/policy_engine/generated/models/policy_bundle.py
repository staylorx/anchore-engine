# coding: utf-8

"""
    anchore_engine.services.policy_engine

    This is a policy evaluation service. It receives push-events from external systems for data updates and provides an api for requesting image policy checks

    OpenAPI spec version: 1.0.0
    Contact: zach@anchore.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PolicyBundle(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'comment': 'str',
        'version': 'str',
        'whitelists': 'list[Whitelist]',
        'policies': 'list[Policy]',
        'mappings': 'list[MappingRule]',
        'whitelisted_images': 'list[ImageSelectionRule]',
        'blacklisted_images': 'list[ImageSelectionRule]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'comment': 'comment',
        'version': 'version',
        'whitelists': 'whitelists',
        'policies': 'policies',
        'mappings': 'mappings',
        'whitelisted_images': 'whitelisted_images',
        'blacklisted_images': 'blacklisted_images'
    }

    def __init__(self, id=None, name=None, comment=None, version=None, whitelists=None, policies=None, mappings=None, whitelisted_images=None, blacklisted_images=None):
        """
        PolicyBundle - a model defined in Swagger
        """

        self._id = None
        self._name = None
        self._comment = None
        self._version = None
        self._whitelists = None
        self._policies = None
        self._mappings = None
        self._whitelisted_images = None
        self._blacklisted_images = None

        self.id = id
        if name is not None:
          self.name = name
        if comment is not None:
          self.comment = comment
        self.version = version
        if whitelists is not None:
          self.whitelists = whitelists
        self.policies = policies
        self.mappings = mappings
        if whitelisted_images is not None:
          self.whitelisted_images = whitelisted_images
        if blacklisted_images is not None:
          self.blacklisted_images = blacklisted_images

    @property
    def id(self):
        """
        Gets the id of this PolicyBundle.
        Id of the bundle

        :return: The id of this PolicyBundle.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this PolicyBundle.
        Id of the bundle

        :param id: The id of this PolicyBundle.
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this PolicyBundle.

        :return: The name of this PolicyBundle.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this PolicyBundle.

        :param name: The name of this PolicyBundle.
        :type: str
        """

        self._name = name

    @property
    def comment(self):
        """
        Gets the comment of this PolicyBundle.

        :return: The comment of this PolicyBundle.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """
        Sets the comment of this PolicyBundle.

        :param comment: The comment of this PolicyBundle.
        :type: str
        """

        self._comment = comment

    @property
    def version(self):
        """
        Gets the version of this PolicyBundle.

        :return: The version of this PolicyBundle.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this PolicyBundle.

        :param version: The version of this PolicyBundle.
        :type: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version

    @property
    def whitelists(self):
        """
        Gets the whitelists of this PolicyBundle.

        :return: The whitelists of this PolicyBundle.
        :rtype: list[Whitelist]
        """
        return self._whitelists

    @whitelists.setter
    def whitelists(self, whitelists):
        """
        Sets the whitelists of this PolicyBundle.

        :param whitelists: The whitelists of this PolicyBundle.
        :type: list[Whitelist]
        """

        self._whitelists = whitelists

    @property
    def policies(self):
        """
        Gets the policies of this PolicyBundle.

        :return: The policies of this PolicyBundle.
        :rtype: list[Policy]
        """
        return self._policies

    @policies.setter
    def policies(self, policies):
        """
        Sets the policies of this PolicyBundle.

        :param policies: The policies of this PolicyBundle.
        :type: list[Policy]
        """
        if policies is None:
            raise ValueError("Invalid value for `policies`, must not be `None`")

        self._policies = policies

    @property
    def mappings(self):
        """
        Gets the mappings of this PolicyBundle.

        :return: The mappings of this PolicyBundle.
        :rtype: list[MappingRule]
        """
        return self._mappings

    @mappings.setter
    def mappings(self, mappings):
        """
        Sets the mappings of this PolicyBundle.

        :param mappings: The mappings of this PolicyBundle.
        :type: list[MappingRule]
        """
        if mappings is None:
            raise ValueError("Invalid value for `mappings`, must not be `None`")

        self._mappings = mappings

    @property
    def whitelisted_images(self):
        """
        Gets the whitelisted_images of this PolicyBundle.
        List of mapping rules that define which images should always be passed (unless also on the blacklist), regardless of policy result.

        :return: The whitelisted_images of this PolicyBundle.
        :rtype: list[ImageSelectionRule]
        """
        return self._whitelisted_images

    @whitelisted_images.setter
    def whitelisted_images(self, whitelisted_images):
        """
        Sets the whitelisted_images of this PolicyBundle.
        List of mapping rules that define which images should always be passed (unless also on the blacklist), regardless of policy result.

        :param whitelisted_images: The whitelisted_images of this PolicyBundle.
        :type: list[ImageSelectionRule]
        """

        self._whitelisted_images = whitelisted_images

    @property
    def blacklisted_images(self):
        """
        Gets the blacklisted_images of this PolicyBundle.
        List of mapping rules that define which images should always result in a STOP/FAIL policy result regardless of policy content or presence in whitelisted_images

        :return: The blacklisted_images of this PolicyBundle.
        :rtype: list[ImageSelectionRule]
        """
        return self._blacklisted_images

    @blacklisted_images.setter
    def blacklisted_images(self, blacklisted_images):
        """
        Sets the blacklisted_images of this PolicyBundle.
        List of mapping rules that define which images should always result in a STOP/FAIL policy result regardless of policy content or presence in whitelisted_images

        :param blacklisted_images: The blacklisted_images of this PolicyBundle.
        :type: list[ImageSelectionRule]
        """

        self._blacklisted_images = blacklisted_images

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PolicyBundle):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
