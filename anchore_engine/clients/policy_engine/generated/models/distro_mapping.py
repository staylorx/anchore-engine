# coding: utf-8

"""
    anchore_engine.services.policy_engine

    This is a policy evaluation service. It receives push-events from external systems for data updates and provides an api for requesting image policy checks  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: zach@anchore.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DistroMapping(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'from_distro': 'str',
        'to_distro': 'str',
        'flavor': 'str',
        'created_at': 'datetime'
    }

    attribute_map = {
        'from_distro': 'from_distro',
        'to_distro': 'to_distro',
        'flavor': 'flavor',
        'created_at': 'created_at'
    }

    def __init__(self, from_distro=None, to_distro=None, flavor=None, created_at=None):  # noqa: E501
        """DistroMapping - a model defined in Swagger"""  # noqa: E501

        self._from_distro = None
        self._to_distro = None
        self._flavor = None
        self._created_at = None
        self.discriminator = None

        if from_distro is not None:
            self.from_distro = from_distro
        if to_distro is not None:
            self.to_distro = to_distro
        if flavor is not None:
            self.flavor = flavor
        if created_at is not None:
            self.created_at = created_at

    @property
    def from_distro(self):
        """Gets the from_distro of this DistroMapping.  # noqa: E501

        The name of the distro to map as would be reported in the image itself from a file like /etc/os_release  # noqa: E501

        :return: The from_distro of this DistroMapping.  # noqa: E501
        :rtype: str
        """
        return self._from_distro

    @from_distro.setter
    def from_distro(self, from_distro):
        """Sets the from_distro of this DistroMapping.

        The name of the distro to map as would be reported in the image itself from a file like /etc/os_release  # noqa: E501

        :param from_distro: The from_distro of this DistroMapping.  # noqa: E501
        :type: str
        """

        self._from_distro = from_distro

    @property
    def to_distro(self):
        """Gets the to_distro of this DistroMapping.  # noqa: E501

        The distro name to use instead for cve matching purposes.  # noqa: E501

        :return: The to_distro of this DistroMapping.  # noqa: E501
        :rtype: str
        """
        return self._to_distro

    @to_distro.setter
    def to_distro(self, to_distro):
        """Sets the to_distro of this DistroMapping.

        The distro name to use instead for cve matching purposes.  # noqa: E501

        :param to_distro: The to_distro of this DistroMapping.  # noqa: E501
        :type: str
        """

        self._to_distro = to_distro

    @property
    def flavor(self):
        """Gets the flavor of this DistroMapping.  # noqa: E501

        The flavor of the distro  # noqa: E501

        :return: The flavor of this DistroMapping.  # noqa: E501
        :rtype: str
        """
        return self._flavor

    @flavor.setter
    def flavor(self, flavor):
        """Sets the flavor of this DistroMapping.

        The flavor of the distro  # noqa: E501

        :param flavor: The flavor of this DistroMapping.  # noqa: E501
        :type: str
        """

        self._flavor = flavor

    @property
    def created_at(self):
        """Gets the created_at of this DistroMapping.  # noqa: E501

        Timestamp of mapping creation  # noqa: E501

        :return: The created_at of this DistroMapping.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this DistroMapping.

        Timestamp of mapping creation  # noqa: E501

        :param created_at: The created_at of this DistroMapping.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DistroMapping):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
