# coding: utf-8

"""
    anchore_engine.services.policy_engine

    This is a policy evaluation service. It receives push-events from external systems for data updates and provides an api for requesting image policy checks  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: zach@anchore.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from anchore_engine.clients.policy_engine.generated.models.legacy_vulnerability_report_multi_result import LegacyVulnerabilityReportMultiResult  # noqa: F401,E501


class LegacyVulnerabilityReportMulti(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'url_column_index': 'int',
        'result': 'LegacyVulnerabilityReportMultiResult',
        'warns': 'list[str]'
    }

    attribute_map = {
        'url_column_index': 'url_column_index',
        'result': 'result',
        'warns': 'warns'
    }

    def __init__(self, url_column_index=None, result=None, warns=None):  # noqa: E501
        """LegacyVulnerabilityReportMulti - a model defined in Swagger"""  # noqa: E501

        self._url_column_index = None
        self._result = None
        self._warns = None
        self.discriminator = None

        if url_column_index is not None:
            self.url_column_index = url_column_index
        if result is not None:
            self.result = result
        if warns is not None:
            self.warns = warns

    @property
    def url_column_index(self):
        """Gets the url_column_index of this LegacyVulnerabilityReportMulti.  # noqa: E501

        The index for the url column, for parsing  # noqa: E501

        :return: The url_column_index of this LegacyVulnerabilityReportMulti.  # noqa: E501
        :rtype: int
        """
        return self._url_column_index

    @url_column_index.setter
    def url_column_index(self, url_column_index):
        """Sets the url_column_index of this LegacyVulnerabilityReportMulti.

        The index for the url column, for parsing  # noqa: E501

        :param url_column_index: The url_column_index of this LegacyVulnerabilityReportMulti.  # noqa: E501
        :type: int
        """

        self._url_column_index = url_column_index

    @property
    def result(self):
        """Gets the result of this LegacyVulnerabilityReportMulti.  # noqa: E501


        :return: The result of this LegacyVulnerabilityReportMulti.  # noqa: E501
        :rtype: LegacyVulnerabilityReportMultiResult
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this LegacyVulnerabilityReportMulti.


        :param result: The result of this LegacyVulnerabilityReportMulti.  # noqa: E501
        :type: LegacyVulnerabilityReportMultiResult
        """

        self._result = result

    @property
    def warns(self):
        """Gets the warns of this LegacyVulnerabilityReportMulti.  # noqa: E501

        Array of warning messages generated during the last cve scan, if any  # noqa: E501

        :return: The warns of this LegacyVulnerabilityReportMulti.  # noqa: E501
        :rtype: list[str]
        """
        return self._warns

    @warns.setter
    def warns(self, warns):
        """Sets the warns of this LegacyVulnerabilityReportMulti.

        Array of warning messages generated during the last cve scan, if any  # noqa: E501

        :param warns: The warns of this LegacyVulnerabilityReportMulti.  # noqa: E501
        :type: list[str]
        """

        self._warns = warns

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LegacyVulnerabilityReportMulti):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
